<?xml version="1.0"?>
<package >
  <metadata>
    <id>$id$</id>
    <version>$version$</version>
    <title>$title$</title>
    <authors>Unterrainer Informatik OG Team</authors>
    <owners>Public Domain</owners>
    <licenseUrl>http://unlicense.org</licenseUrl>
    <projectUrl>https://github.com/UnterrainerInformatik/FiniteStateMachine</projectUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>Build complex machines holding the state of your game components using an intuitive fluent DSL.</description>
    <summary>
      This project implements a Finite-State-Machine (FSM) designed to be used in games.
	  Furthermore it implements even a Stack-Based-FSM (SBFSM). So you may tell it to 'continue with the last state before the active one'.
	  You describe your FSM using a nice and well documented DSL (Domain Specific Language).

      This replaces the code we usually had for keyboard-input (run-left-right-duck-jump), clicked buttons on the GUI (idle-over-down-refreshing), tower-states (idle-aiming-firing-reloading) or for the connection procedure when setting up peer2peer connections in our games....
    </summary>
    <releaseNotes></releaseNotes>
    <copyright>Copyright 2017</copyright>
    <language>en-US</language>
    <tags>state finite machine gamestate transition fluent</tags>
  </metadata>
</package>